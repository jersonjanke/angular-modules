(function() {
    'use strict';

    angular.module('{{conf.mainName}}.{{options.name}}')
        .factory('{{options.entity}}Svc', Service);

    Service.$inject = ['$http', '$q', 'ApiSeniorHCM'];
    /*@ngInject*/
    function Service($http, $q, ApiSeniorHCM) {

        var service = {};
        {{^options.crud}}/*{{/options.crud}}
        service.getById = getById;
        service.getAll = getAll;
        service.save = save;
        service.remove = remove;
        {{^options.crud}}*/{{/options.crud}}
        return service;

        /**
         * Get a {{options.entity}} entity by his id
         * @param id
         * @returns {*}
         * @private
         */
{{^options.crud}}/*{{/options.crud}}
        function getById(id) {
            var future = $q.defer();
            {{#options.crud}}
            /**
             * Descomente
            {{/options.crud}}
            $http.get(ApiSeniorHCM.get{{options.entity}}ByIdUrl(id), {
                withCredentials: true
            })
                .then(completed)
                .catch(failed);

            function completed(response) {
                future.resolve(response.data);
            }

            function failed(data) {
                future.reject(data);
            }
            {{#options.crud}}
            */{{/options.crud}}

            future.resolve({}); //Remover essa linha
            return future.promise;
        }
{{^options.crud}}*/{{/options.crud}}

        /**
        * Get all {{options.entity}} entities
        * @returns {*}
        * @private
        */
        {{^options.crud}}/*{{/options.crud}}
        function getAll() {
            var future = $q.defer();
            {{#options.crud}}
                /**
                * Descomente
            {{/options.crud}}
            $http.get(ApiSeniorHCM.getAll{{options.entity}}Url(), {
                withCredentials: true
            })
            .then(completed)
            .catch(failed);

            function completed(response) {
                future.resolve(response.data);
            }

            function failed(data) {
                future.reject(data);
            }
{{#options.crud}}
            */{{/options.crud}}

            future.resolve({}); //Remover essa linha
            return future.promise;
        }
        {{^options.crud}}*/{{/options.crud}}

        /**
         * Update the selected {{options.entity}}
         * @param model
         * @returns {*}
         * @private
         */
{{^options.crud}}/*{{/options.crud}}
        function save(model) {
            if (!angular.isDefined(model)) {
                return false;
            }
            var id = model.id || false,
                svc;

            var future = $q.defer();
            /**
            * Descomente
            if(id) {
                svc = $http.put(ApiSeniorHCM.get{{options.entity}}UpdateUrl(id), model, {
                    withCredentials: true
                });
            } else {
                svc = $http.post(ApiSeniorHCM.get{{options.entity}}CreateUrl(), model, {
                    withCredentials: true
                });
            }
                .then(completed)
                .catch(failed);

            function completed(response) {
                future.resolve(response.data);
            }

            function failed(data) {
                future.reject(data);
            }
{{#options.crud}}
            */{{/options.crud}}

            future.resolve({}); //Remover essa linha
            return future.promise;
        }
{{^options.crud}}*/{{/options.crud}}
        /**
         * Delete the selected {{options.entity}}
         * @param professionalExperienceId
         * @returns {*}
         * @private
         */
{{^options.crud}}/*{{/options.crud}}
        function remove(id) {
            if (!angular.isDefined(id)) {
                return false;
            }
            var future = $q.defer();
            {{#options.crud}}
                /**
                * Descomente
            {{/options.crud}}
            $http['delete'](ApiSeniorHCM.get{{options.entity}}DeleteUrl(id), {
                withCredentials: true
            })
                .then(completed)
                .catch(failed);

            function completed(response) {
                future.resolve(response.data);
            }

            function failed(data) {
                future.reject(data);
            }
{{#options.crud}}
            */{{/options.crud}}

            future.resolve({}); //Remover essa linha
            return future.promise;
        }
{{^options.crud}}*/{{/options.crud}}
    }
    return Service;
})();