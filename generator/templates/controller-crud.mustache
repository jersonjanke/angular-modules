(function() {
    'use strict';

    angular.module('{{conf.mainName}}.{{options.name}}')
        .controller('{{options.entity}}Ctrl', {{options.entity}}Ctrl);

    {{options.entity}}Ctrl.$inject = ['$state',
        '$filter',
        '{{options.entity}}ItemsData',
        '{{options.entity}}Data',
        '{{options.entity}}Svc'];
        /*@ngInject*/
    function {{options.entity}}Ctrl($state,
        $filter,
        {{options.entity}}ItemsData,
        {{options.entity}}Data,
        {{options.entity}}Svc
        ) {

        var vm = this;
        vm.isLoading = false;
        var toastr = require('toastr');

        /**
        * Propriedades
        */
        /**
        * Model
        */
        vm.model = {{options.entity}}Data;
        vm.items = {{options.entity}}ItemsData;

        /**
        * Métodos
        */
        vm.remove = remove;
        vm.save = save;
        /**
        * Salvar
        */
        function save(form) {
            if (!form.$valid) {
                return false;
            }

            var model = angular.copy(vm.model);
            vm.isLoading = true;
            toastr.options.timeOut = 3000;
            {{options.entity}}Svc.save(model)
            .then(function() {
                toastr['success']($filter('i18n')("{{options.entity}} foi salvo."),
                $filter('i18n')("{{options.entity}}"));
                return $state.go('{{options.nameLower}}.{{options.entityLower}}');
            }).catch(function() {
                toastr.options.timeOut = false;
                toastr['warning']($filter('i18n')("Oops. Não foi possível salvar {{options.entity}}."),
                $filter('i18n')("{{options.entity}}"));
            }).finally(function() {
                vm.isLoading = false;
            });
        }
        /**
        * Remove the selected professional experience
        */
        function remove() {
            var model = vm.model;
            if (!angular.isDefined(model.id)) {
                return false;
            }
            {{options.entity}}Svc.remove(model.id)
            .then(function() {
                toastr['success']($filter('i18n')("{{options.entity}} foi removido."),
                $filter('i18n')("{{options.entity}}"));
                return $state.go('{{options.nameLower}}.{{options.entityLower}}');
            }).catch(function() {
                toastr.options.timeOut = false;
                toastr['warning']($filter('i18n')("Oops. Não foi possível remover {{options.entity}}."),
                $filter('i18n')("{{options.entity}}"));
            }).finally(function() {
                vm.isLoading = false;
            });
        }

    }

    return {{options.entity}}Ctrl;
})();